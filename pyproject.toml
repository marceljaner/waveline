[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
select = [
    "F", # pyflakes
    "E", "W", # pycodestyle
    "I", # isort
    "N", # pep8 naming
    "B", # flake8 bugbear
    "A", # flake8 builtins
    "C4", # flake8 comprehensions
    "G", # flake8 logging format
    "PIE", # flake8 pie
    "RET", # flake8 return
    "SIM", # flake8 simplify
    "PT", # flake8 pytest style
    "PL", # pylint
    "PERF", # perflint
    "RUF", # ruff specific rules
]
ignore = [
    "G004", # logging statement uses f-string
    "PLR0913", # too many arguments in function call
    "PLR2004", # magic value used in comparison
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "PT011", # use a more specific exception in pytest.raises
]
"examples/*" = [
    "E501", # line too long
]

[tool.coverage.run]
branch = true
parallel = true
source = ["waveline"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-q --benchmark-columns=mean,stddev"
testpaths = ["tests/unit"]
log_cli = true
log_cli_level = "WARNING"
asyncio_mode = "auto"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = black, isort, pylint, mypy, py36, py37, py38, py39, py310, py311, coverage-report

[testenv:black]
skip_install = true
deps = black
commands =
    black --diff src/
    black --check src/

[testenv:ruff]
skip_install = true
deps = ruff
commands = ruff check .

[testenv:mypy]
skip_install = true
deps =
    mypy
    types-dataclasses
commands = mypy src/

[testenv]
extras = tests
commands = 
    coverage run -m pytest --benchmark-disable

[testenv:coverage-report]
skip_install = true
deps =
    coverage[toml]>=5
commands =
    - coverage combine
    coverage report
    coverage xml

[testenv:docs]
extras = docs
changedir = docs
commands =
    sphinx-build -b linkcheck . _build
    sphinx-build -b dummy . _build
"""
